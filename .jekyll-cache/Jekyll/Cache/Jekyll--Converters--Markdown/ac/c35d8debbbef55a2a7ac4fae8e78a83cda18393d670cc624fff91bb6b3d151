I"*$<p>PS: I LOVE Professor <a href="http://www.cs.toronto.edu/~pgries/">Paul Gries</a>, his beard become more white now than then but still, he is THE best professor I have seen ever, not even one of. I will add defend this statement later more.</p>

<p>This <a href="https://bb.teach.cs.toronto.edu/categories">UofT CS discussion board</a> is interesting too.</p>

<h2 id="program">Program</h2>
<p>Run a program: <strong>translate</strong> a high-level <strong>programming</strong> language to a low-level <strong>machine</strong> language whose instructions can be executed</p>

<p>Translate:</p>

<ul>
  <li>
    <p>Types:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      (1) Interpreted Language: (e.g. Python)
                  - translate and execute one statement at a time
        
      (2) Compiled Language: (e.g. C)
                  - compile the entire program (once), then execute(any number of times)
                    
      (3) Hybrid (e.g. Java)
                  - compile to someting intermediate(in Java, bytecode)
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="variable">Variable</h2>
<ol>
  <li>
    <p>need to declare a type for every variable as contrasted to <strong>Python</strong> where variable does not have a type and only object has</p>
  </li>
  <li>
    <p>got reserved a space in memory for every variable declared’s default value (default value will be given if not assigned specifically).</p>
  </li>
  <li>
    <p>static variable:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     - "static" in general describes properties (variables, methods) that belong to the class but not an instance of the class.
     - so static variables are common to all objects of the class, i.e. all instances of the class shares that one static                       variable which only exists as one copy of fixed location of memory address.  
     - static variable can be accessed with or without creating an instance
</code></pre></div>    </div>
  </li>
  <li>
    <p>instance variable</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     - as constrasted to static variable, instance variable has separate locations of memory address for different  
       instances of the class, each instance has their own version 
          
     - Initialization:
                 * data structure type of variable like Array such as String[] will be nully initialized by default
</code></pre></div>    </div>
  </li>
  <li>
    <p>primitive type (What are the eight primitive types?)</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     - byte
     - int
     - float
     - double
        
        
     - long
        
     - short
        
     - boolean
     - char
</code></pre></div>    </div>
  </li>
</ol>

<p>++first?</p>

<p>first++?</p>

<h2 id="methods">Methods</h2>
<ul>
  <li>
    <p>main method:
          - default arguments?</p>
  </li>
  <li>
    <p>instance method</p>
  </li>
  <li>
    <p>static method</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      - static methods cannot access instance variables nor instance methods
      - static method cannot be accessed through "this" 
</code></pre></div>    </div>
  </li>
  <li>
    <p>constructor</p>
  </li>
  <li></li>
</ul>

<h2 id="class">Class</h2>

<ul>
  <li>
    <p>subclass of the object class
          All classes are subclasses of Object class</p>
  </li>
  <li>
    <p>any other class?</p>
  </li>
</ul>

<h3 id="abstract-class">Abstract Class</h3>

<ul>
  <li>Extensibility:
          - can be extended by concrete class</li>
</ul>

<h2 id="some-interesting-class">Some Interesting Class</h2>

<h3 id="string">String</h3>

<ul>
  <li>
    <p>is an Object, not a primitive data type, and immutable (cannot be changed once created – rather modified, a new one is created)</p>
  </li>
  <li>
    <p>a String type variable holds the memory address of the object rather than the value of it, so <code class="language-plaintext highlighter-rouge">==</code> compares the memory address</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      String a = new String("abcd");
      String b = new String("abcd");
      a == b returns false
        
      String c = "abcd";
      String d = "abcd";
      a == b returns true because compiler optimizes memory use when finding c and d have the same value therefore let them point to the same object
</code></pre></div>    </div>
  </li>
</ul>

<p>Reference: <a href="https://stackoverflow.com/questions/3801343/what-is-string-pool-in-java">String Pool</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        Methods:
        * indexing: iAmString.charAt(2)
        * substring: iAmString.substring(2, 4)
        * trimming: iAmString.trim() /*trim leading and trailing white spaces*/
</code></pre></div></div>

<ul>
  <li>has to use double quote <code class="language-plaintext highlighter-rouge">" "</code>, if it is single quote <code class="language-plaintext highlighter-rouge">' '</code>, it represents the primitive date type char; if want to convert char into String, just do “”+’char’</li>
</ul>

<h2 id="inheritance">Inheritance</h2>

<ul>
  <li>declared variable types over-rule constructor type (confirm?)</li>
</ul>

<h2 id="overloading">Overloading</h2>
<ol>
  <li>Method Overloading is an example of Static Polymorphism</li>
</ol>

<p>more than 1 method having the same name even when argument lists are different in the same class/public interface too?</p>

<p>a) the argument lists of the the methods differ either in number of parameters or data types of parameters</p>

<p>b) place counts as differences in parameters orders</p>

<p>for example</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  int add(int, int)
  float add(int, int) differ in return types and will throw a compilation error
</code></pre></div></div>

<ol>
  <li>Constructor Overloading</li>
</ol>

<h2 id="unit-testing">Unit Testing</h2>
<p>JUnit is a Regression Testing Framework</p>

<ul>
  <li>
    <p>Features</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Fixtures
      - a fixed state of a set of objects used as a baseline for running tests
</code></pre></div>    </div>
  </li>
  <li>
    <p>assertTrue: parameter is a boolean</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       assertTrue
</code></pre></div>    </div>
  </li>
</ul>

<p>public static void assertTrue(boolean condition)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Asserts that a condition is true. If it isn't it throws an AssertionError without a message.

Parameters:
    condition - condition to be checked
</code></pre></div></div>

<h2 id="read-input-file">Read Input File</h2>
<ul>
  <li><a href="https://www.tutorialspoint.com/java/java_file_class.htm">File Class</a></li>
</ul>

<p>File object represents actual file/directory on the disk</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        File(String pathname): creates a new File instance by converting the given pathname to  
        an abstract pathname (?what is an abstract pathname?)
</code></pre></div></div>

<h2 id="package">Package</h2>

<h2 id="override-equals">Override equals()</h2>
<p>always has to override hashCode() as well at the same time
<a href="http://www.xyzws.com/javafaq/why-always-override-hashcode-if-overriding-equals/20">Why always override hashcode() if overriding equals()?</a></p>

<h2 id="resources">Resources</h2>
<p><a href="http://docs.oracle.com/javase/tutorial/java/TOC.html">Oracle Javadoc Tutorial</a></p>

<p><a href="https://www.sololearn.com/Course/Java">Java Walk-through</a></p>

<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html">Oracle Java Tutorial Class Variables</a></p>

<p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html">Oracle Java Tutorial Subclasses</a></p>

<h2 id="questions">Questions</h2>

<ol>
  <li>
    <p>what is <strong>static</strong> method</p>
  </li>
  <li>
    <p>what is <strong>JDK</strong>, <strong>JRE</strong>, <strong>JVM</strong></p>
  </li>
  <li>
    <p>what is the difference between functions and methods</p>
  </li>
  <li>
    <p>what is .jar file, what is classpath?</p>
  </li>
  <li>
    <p>add JUnit5 to classpath?</p>
  </li>
  <li>
    <p>what is a Test Root?</p>
  </li>
  <li>
    <p>what is JUnit?</p>
  </li>
  <li>
    <p>need to compile class one by one in IntelliJ, there are dependencies existing between classes</p>
  </li>
  <li>
    <p>assertTrue</p>
  </li>
  <li>
    <p>when constructor does not initiate an instance variable then?</p>
  </li>
</ol>
:ET